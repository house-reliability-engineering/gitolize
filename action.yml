name: Gitolize
description: Wrap a shell command with gitolize
inputs:
  keep-ansi-in-commit-message:
    description: whether to keep ANSI escape sequences in the commit message
    default: 'false'
  branch:
    description: which branch to pull from and push to
  command:
    description: shell command to be run by gitolize
    required: true
  print-commit-sha:
    description: whether to print the SHA of the new git commit
    default: 'false'
  local_directory:
    description:  location of the gitolize target git repository checkout
  commit-message:
    description: git commit message describing the changes to be made by the command
  project:
    description: which project is the command to operate on (used for locking)
  repository:
    description: url of the git repository to pull from and push to
  stdio:
    description: whether stdout/stder should be captured in the commit message
    default: 'false'
  verbose:
    description: whether gitolize should be verbose
    default: 'false'
  write:
    description: whether the changes made by the command are to be pushed to the git repository
    default: 'false'

runs:
  using: composite
  steps:
    - shell: bash
      run: |
        ${{ github.action_path }}/gitolize.sh \
          ${{ inputs.keep-ansi-in-commit-message == 'true' && '-a' || '' }} \
          ${{ inputs.branch && format('-b "{0}"', inputs.branch) || '' }} \
          ${{ inputs.print-commit-sha == 'true' && '-c' || '' }} \
          ${{ inputs.local_directory && format('-l "{0}"', inputs.local_directory) || '' }} \
          ${{ inputs.commit-message && format('-m "{0}"', inputs.commit-message) || '' }} \
          ${{ inputs.project && format('-p "{0}"', inputs.project) || '' }} \
          ${{ inputs.repository && format('-r "{0}"', inputs.repository) || '' }} \
          ${{ inputs.stdio == 'true' && '-s' || '' }} \
          ${{ inputs.verbose == 'true' && '-v' || '' }} \
          ${{ inputs.write == 'true' && '-w' || '' }} \
          ${{ inputs.command }}
